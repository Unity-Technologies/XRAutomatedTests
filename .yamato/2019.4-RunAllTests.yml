2019.4_RunAllTests:
  name: 2019.4_RunAllTests
  variables:
    unityVERSION: "2019.4/staging"
  dependencies:
    - path: .yamato/2019.4-FunctionalTests.yml#2019.4_FunctionalTests
      rerun: always
    - path: .yamato/2019.4-GraphicsTests.yml#2019.4_GraphicsTests
      rerun: always
    - path: .yamato/2019.4-RunAllTests.yml#2019.4_RunAllTests_OnJenkins
      rerun: always

2019.4_RunAllTests_OnJenkins:
  name: 2019.4_RunAllTests_OnJenkins
  agent:
    type: Unity::VM
    image: sdet/gamecode_win10:latest
    flavor: b1.large
  interpreter: python
  variables:
    unityVERSION: "2019.4/staging"
  commands:
    - |
      import os
      import sys

      #Add .yamato\utlity folder to the path, so we can easily add the python file within it.
      sys.path.append(os.path.join(os.getenv("YAMATO_WORK_DIR"), 'unity\\xr.xrautomatedtests\\.yamato\\utility'))

      #import the JenkinJob python file. Ideally we would import this with the other statements above.
      #however python doesn't know where to find the JenkinsJob python file until we add the utility directory to the path.
      import JenkinsJob

      project_name = "2019.4-Run_All_Tests"

      #Retrieve the UnityVERSION, and then determine what type of version it is. (IE: BranchName, UnityVersion, or UnityRevision)
      version = os.getenv("unityVERSION")
      versionType = JenkinsJob.parse_version_for_jenkins(version)
      #Set the versionType and Version for passing to the Jenkins job.
      params = { versionType : version }

      #Invoke the Jenkins Job, and wait for it to complete before returning.
      result = JenkinsJob.start_jenkins_job(project_name,params,True,True)
      print("result:" + result)

      #check to see if we were successful, otherwise exit out with an error.
      if result != "SUCCESS":
        sys.exit("Jenkins Job: " + project_name +" has failed!")